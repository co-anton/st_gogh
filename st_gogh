#!/usr/bin/zsh

check_download_themes() {
  # Download colour scheme if not found locally
  themes=$HOME/.config/terminal_colours
  [[ ! -d $themes ]] && mkdir -p $themes
  url=https://raw.githubusercontent.com/Mayccoll/Gogh/master/data/themes.json
  if [[ ! -f $themes/colours.json ]]; then
    curl -s $url > $themes/colours.json
  fi
  echo "$themes/colours.json"
}

print_names() {
  # Print themes' names
  colours="$1"
  i="1"
  for theme in `cat $colours | jq ".themes[].name"`; do
    echo "$i) $theme"
    i=$((i+1))
  done
}

set_theme() {
  # Create temp file with colour theme (if name not provided
  # via $1, interactively asks user)

  tmptheme="/tmp/colourtheme"
  colours=`check_download_themes`

  # Get name via $1 or ask user 
  name_query="$1"
  if [ -z "${name_query}" ]; then
    print_names $colours | less
    echo "Choose theme number: "
    read choice
  else
    choice=`./find_name.py ${name_query} $colours`
    if [ $choice = "-1" ]; then
      echo "Could not find theme $name_query" && exit 1
    fi
  fi

  choice=$((choice-1))
  theme=`cat $colours | jq ".themes[$choice]"`
  name=`echo $theme | jq ".name "`
  echo "Setting theme: $name"

  # Write values to temp file
  colours=(black red green yellow blue purple cyan white brightBlack brightRed brightGreen brightYellow brightBlue brightPurple brightCyan brightWhite)
  echo "static const char *colorname[] = {" > $tmptheme
  echo "  /* Theme - $name */" >> $tmptheme
  for colour in $colours; do
    echo "  `echo $theme | jq .$colour`," >> $tmptheme
  done
  echo "  `echo "/* Other colours */"`" >> $tmptheme
  echo "  [255] = 0," >> $tmptheme
  echo "  \"#cccccc\"," >> $tmptheme
  echo "  \"#555555\"," >> $tmptheme
  echo "  `echo "/* Foreground and background colours */"`" >> $tmptheme
  echo "  `echo $theme | jq ."foreground"`," >> $tmptheme
  echo "  `echo $theme | jq ."background"`," >> $tmptheme
  echo "};" >> $tmptheme
}

find_config_all() { find $HOME -path '**/st/config.h' }

find_config_one() { find_config_all | head -n 1 }

find_code_replace() {
  # Overwrite colour selection in config.h with temp file created by
  # set_theme

  config=`find_config_one`
  while true; do
    echo -n "Update $config?[yes/no] " 
    read yn
    case $yn in
      [Yy]*) break;;
      [Nn]*) echo "enter path - hint: `find_config_all`" && read config;;
      *) ;;
    esac
  done
  cp "$config" "$config.bkp" # backup
  
  # Replace colourname
  colourname=`pcregrep -Mo "^static const char \*colorname\[\] = (\{([^{}]++|(?1))*\};)" $config`
  echo $colourname > /tmp/oldtheme
  ./replace.py /tmp/oldtheme /tmp/colourtheme $config || exit 1

  # Replace bg/fg
  sed -i 's/defaultfg = .*/defaultfg = 258;/' $config
  sed -i 's/defaultbg = .*/defaultbg = 259;/' $config
}

main() {
  set_theme $1 && find_code_replace && echo "Recompile st and test new theme!\nTo reverse changes do\n  mv \"$config.bkp\" $config"
}

main $1
